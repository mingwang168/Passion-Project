技术简介:
1.用户注册登录用AWS:mingwang0904@gmail.com
2.前端用React
3.后端用.net
4.数据库用Azure
系统功能:
数据库设计:




书籍共享功能:
1.用户注册,登录
2.上传自己的书,上传一本书1个积分,书被借阅一次2个积分
3.查看自己共享的书
4.查找别人共享的书(按关键字查找,按类别查找)
5.显示最多人借的,最新出版的,按分类显示.
6.加入感兴趣书单
7.点借阅后锁定,其他人不能再借,阅一本书消费2个积分
8.持有人确定借出,借阅人确认收到.
9.归还,收到归还.
10.借阅人可以写书评.



数据表:
计划:计划ID,表单ID,天数,单词数,学了几天
单词表单:表单ID,表单名,单词数量
词表:表单ID,词ID,词,音标,中文,词状态
任务:任务ID,日期,开始时间,结束时间,计划ID,学数量,复习数量
任务词表:任务词单ID,词ID,任务ID,词任务状态,词类型(新词,复习词)



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MemorizeWordsAPI.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MemorizeWordsAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class LearningScheduleController : ControllerBase
    {
        private readonly MWContext _context;

        public LearningScheduleController(MWContext context)
        {
            _context = context;
        }

        // GetAll() is automatically recognized as
        // http://localhost:<port #>/api/todo
        [HttpGet]
        public IEnumerable<LearningSchedule> GetAll()
        {
            return _context.LearningSchedules.ToList();
        }

        // GetById() is automatically recognized as
        // http://localhost:<port #>/api/todo/{id}

        // For example:
        // http://localhost:<port #>/api/todo/1

        [HttpGet("{id}", Name = "GetLearningSchedule")]
        public IActionResult GetById(long id)
        {
            var item = _context.LearningSchedules.FirstOrDefault(t => t.ScheduleID == id);
            if (item == null)
            {
                return NotFound();
            }
            return new ObjectResult(item);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutLearningSchedule(int id, LearningSchedule @learningSchedule)
        {
            if (id != @learningSchedule.ScheduleID)
            {
                return BadRequest();
            }

            _context.Entry(@learningSchedule).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!LearningScheduleExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        private bool LearningScheduleExists(int id)
        {
            return _context.LearningSchedules.Any(e => e.ScheduleID == id);
        }
    }
}










